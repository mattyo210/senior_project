#!/usr/bin/env python

# Author : Chayapol Piyaphakdeesakun

import rospy
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import atexit
from time import sleep

pub = ''

class Obstacle():
	def __init__(self):
		self.LIDAR_ERR = 0.05
		self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
		global pub
		pub = self._cmd_pub
		self.obstacle()

	def get_scan(self):
		msg = rospy.wait_for_message("scan", LaserScan)
		self.scan_filter = []
		for i in range(360):
			self.scan_filter.append(msg.ranges[i])


	def obstacle(self):
		self.twist = Twist()
		
		while not rospy.is_shutdown():
			try:
				a=self.whatDoISee()
				
			except KeyboardInterrupt:
				stop()
	
	def whatDoISee(self):
		wallList=[]
		self.get_scan()
		up_right=list(filter(lambda x: x > 0.03 and x < 4, self.scan_filter[:30]))
		up_left=list(filter(lambda x: x > 0.03 and x < 4 , self.scan_filter[330:]))
		up=up_right + up_left
		right=list(filter(lambda x: x > 0.03 and x < 4, self.scan_filter[60:120]))
		down=list(filter(lambda x: x > 0.03 and x < 4, self.scan_filter[150:210]))
		left=list(filter(lambda x: x > 0.03 and x < 4, self.scan_filter[240:300]))
		wallList=[sum(up)/len(up) , sum(right)/len(right) , sum(down)/len(down) , sum(left)/len(left)]
		print(wallList)
		walldict=dict(up=False,right=False,down=False,left=False)	
		for i in range(len(wallList)):		
			if wallList[i] < 0.6:
				if i==0:
					walldict["up"]=True
				elif i==1:
					walldict["left"]=True
				elif i==2:
					walldict["down"]=True
				elif i==3:
					walldict["right"]=True
		print(walldict)
		n=raw_input()
		return wallList

			
	

def stop():
	print('Stopping robot')
	twist = Twist()
	twist.linear.x = 0.0
	twist.angular.z = 0.0
	pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
	pub.publish(twist)

def main():
	rospy.init_node('run')
	rospy.on_shutdown(stop)

	try:
		obstacle = Obstacle()
	except rospy.ROSInterruptException:
		pass
if __name__ == '__main__':
	atexit.register(stop)
	main()
