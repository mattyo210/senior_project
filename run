#!/usr/bin/env python

# Author : Chayapol Piyaphakdeesakun

import rospy
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import atexit
import math

pub = ''

class Obstacle():
	def __init__(self):
		self.LIDAR_ERR = 0.05
		self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
		global pub
		pub = self._cmd_pub
		self.obstacle()

	def get_scan(self):
		msg = rospy.wait_for_message("scan", LaserScan)
		self.scan_filter = []
		for i in range(360):
			self.scan_filter.append(msg.ranges[i])

	def get_odom(self):
		msg = rospy.wait_for_message("odom", Odometry)
		self.odom_pos_x = msg.pose.pose.position.x
		self.odom_pos_y = msg.pose.pose.position.y

	def obstacle(self):
		self.twist = Twist()
		
		while not rospy.is_shutdown():
			try:
				print("distance : ")
				distance = input()
				remain = self.corridorFollow(int(distance))
				print("distance remaining : "+str(remain))
				
			except KeyboardInterrupt:
				stop()
	
	def whatDoISee(self):
		wallList=[]
		self.get_scan()
		up_right=list(filter(lambda x: x > 0.03 and x <= 5, self.scan_filter[:30]))
		up_left=list(filter(lambda x: x > 0.03 and x <= 5, self.scan_filter[330:]))
		up=up_right + up_left
		right=list(filter(lambda x: x > 0.03 and x <= 5, self.scan_filter[60:120]))
		down=list(filter(lambda x: x > 0.03 and x <= 5, self.scan_filter[150:210]))
		left=list(filter(lambda x: x > 0.03 and x <= 5, self.scan_filter[240:300]))
		wallList=[sum(up)/len(up) , sum(right)/len(right) , sum(down)/len(down) , sum(left)/len(left)]
		#print(wallList)
		walldict=dict(up=False,right=False,down=False,left=False)	
		for i in range(len(wallList)):		
			if wallList[i] < 0.6:
				if i==0:
					walldict["up"]=True
				elif i==1:
					walldict["left"]=True
				elif i==2:
					walldict["down"]=True
				elif i==3:
					walldict["right"]=True
		#print(walldict)
		#n=raw_input()
		return wallList


	def corridorFollow(self, distance):
		self.get_odom()
		old_x = self.odom_pos_x
 		old_y = self.odom_pos_y
		while True:
			wall_list = []
			wall_list = self.whatDoISee()
			self.get_odom()
			new_x = self.odom_pos_x - old_x
			new_y = self.odom_pos_y - old_y

			dis_rem = distance - math.sqrt((new_x - old_x) **2 + (new_y - old_y) **2)

			if wall_list[0] < 0.25 or dis_rem <= 0:
				self.twist.linear.x = 0.0
				self.twist.angular.z = 0.0
				self._cmd_pub.publish(self.twist)
				if dis_rem < 0:
					dis_rem = 0
				return dis_rem

			elif math.fabs(wall_list[1] - wall_list[3]) > 0.05:
				if wall_list[1] > wall_list[3]:
					self.twist.angular.z = 0.02
				else:
					self.twist.angular.z = -0.02
				self._cmd_pub.publish(self.twist)

			elif math.fabs(wall_list[1] - wall_list[3]) <= 0.05:
				self.twist.angular.z = 0.0
				self._cmd_pub.publish(self.twist)

			self.twist.linear.x = 0.1
			self._cmd_pub.publish(self.twist)


def stop():
	print('Stopping robot')
	twist = Twist()
	twist.linear.x = 0.0
	twist.angular.z = 0.0
	pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
	pub.publish(twist)

def main():
	rospy.init_node('run')
	rospy.on_shutdown(stop)

	try:
		obstacle = Obstacle()
	except rospy.ROSInterruptException:
		pass
if __name__ == '__main__':
	atexit.register(stop)
	main()
